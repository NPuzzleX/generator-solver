package Sudoku

import (
	"errors"
	"math"
	"math/rand"
	"strconv"
)

// ------------------------------------------ HELPER ------------------------------------------
func addArrCheck(arr []int, target int) []int {
	for _, e := range arr {
		if e == target {
			return arr
		}
	}
	return append(arr, target)
}

func remArrCheck(arr []int, target int) []int {
	for i := 0; i < len(arr); i++ {
		if arr[i] == target {
			return append(arr[:i], arr[i+1:]...)
		}
	}
	return arr
}

func exArrCheck(arr []int, target int) bool {
	for i := 0; i < len(arr); i++ {
		if arr[i] == target {
			return true
		}
	}
	return false
}

func ex2ArrCheck(arr [][]int, target []int) bool {
	for i := 0; i < len(arr); i++ {
		if (arr[i][0] == target[0]) && (arr[i][1] == target[1]) {
			return true
		}
	}
	return false
}

func copyArr(arr [][]int) [][]int {
	var cpy [][]int
	for i, e := range arr {
		cpy = append(cpy, []int{})
		for _, e2 := range e {
			cpy[i] = append(cpy[i], e2)
		}
	}
	return cpy
}

func remArrSim(arr [][]int) [][]int {
	for x := 0; x < len(arr); x++ {
		for i := 0; i < len(arr[x]); i++ {
			match := false

			for j := 0; j < len(arr); j++ {
				if (x != j) && exArrCheck(arr[j], arr[x][i]) {
					match = true
					arr[j] = remArrCheck(arr[j], arr[x][i])
				}
			}

			if match {
				arr[x] = append(arr[x][:i], arr[x][i+1:]...)
				i--
			}
		}
	}
	return arr
}

func getAllArrIdx(arr []int, target int) []int {
	idxList := []int{}

	for i, e := range arr {
		if e == target {
			idxList = append(idxList, i)
		}
	}

	return idxList
}

// ------------------------------------------ CONTROLLER ------------------------------------------
func Generate(n int, rSeed int64, quick bool, holes int, mode int) ([][]int, error) {
	r := rand.New(rand.NewSource(rSeed))
	lim := n * n
	if (n < 3) || (n > 7) {
		return nil, errors.New("n BETWEEN 3 AND 7")
	}

	if holes >= lim*lim {
		return nil, errors.New("MAX # OF HOLES " + strconv.Itoa(lim*lim))
	}

	var seed [][]int
	if quick {
		seed = quickFill(n, r)
	} else {
		seed = fill(n, r)
	}

	if !Checker(seed) {
		return nil, errors.New("INVALID BOARD")
	}

	var dt [][]int

	counter := 0

	if mode == -1 {
		dt = copyArr(seed)
		save := [][]int{}
		availX := []int{}

		for i := 0; i < lim; i++ {
			availX = append(availX, lim)
		}

		for nhole := 0; nhole < holes; {
			if counter >= lim*lim-nhole {
				nhole--
				dt[save[len(save)-1][0]][save[len(save)-1][1]] = seed[save[len(save)-1][0]][save[len(save)-1][1]]
				save = save[:(len(save) - 1)]
				counter = 0
				availX[save[len(save)-1][0]]++
			}

			candidateX := []int{}
			for i, e := range availX {
				if e != 0 {
					candidateX = append(candidateX, i)
				}
			}

			x := candidateX[r.Intn(len(candidateX))]
			availBlock := []int{}
			for i := 0; i < lim; i++ {
				if dt[x][i] != 0 {
					availBlock = append(availBlock, i)
				}
			}

			if len(availBlock) == 0 {
				continue
			}

			y := availBlock[r.Intn(len(availBlock))]

			save = append(save, []int{x, y})
			dt[x][y] = 0
			_, err := Solver(dt)

			if err == nil {
				nhole++
				availX[x]--
			} else {
				counter++
				dt[x][y] = seed[x][y]
				save = save[:(len(save) - 1)]
			}
		}
	} else {
		for true {
			dt = copyArr(seed)
			mould := GenerateMould(n, holes, mode, r)

			for i := 0; i < lim; i++ {
				for j := 0; j < lim; j++ {
					if !mould[i][j] {
						dt[i][j] = 0
					}
				}
			}

			_, err := Solver(dt)

			if err == nil {
				break
			}
		}
	}

	return dt, nil
}

func GenerateMould(size int, holes int, mode int, r *rand.Rand) [][]bool {
	/*
	  Pattern:
	  0: \ Symmetry
	  1: / Symmetry
	  2: X Symmetry
	  3: | Symmetry
	  4: - Symmetry
	  5: + Symmetry
	  6: Radial Symmetry 90 deg
	*/

	var mould [][]bool
	lim := size * size
	for i := 0; i < lim; i++ {
		var dt []bool
		for j := 0; j < lim; j++ {
			dt = append(dt, true)
		}
		mould = append(mould, dt)
	}

	for nhole := 0; nhole < holes; {
		x := r.Intn(lim)
		y := r.Intn(lim)

		if !mould[x][y] {
			continue
		}

		mould[x][y] = false
		nhole++

		switch mode {
		case 0:
			{
				if x != y {
					mould[y][x] = false
					nhole++
				}
			}

		case 1:
			{
				if x+y != lim-1 {
					mould[lim-1-y][lim-1-x] = false
					nhole++
				}
			}

		case 2:
			{
				if (x != y) || (x+y != lim-1) {
					mould[y][x] = false
					nhole++
					mould[lim-1-y][lim-1-x] = false
					nhole++
					mould[lim-1-x][lim-1-y] = false
					nhole++
				}
			}

		case 3:
			{
				if float32(y) != (float32(lim)-1.0)/2.0 {
					mould[x][lim-1-y] = false
					nhole++
				}
			}

		case 4:
			{
				if float32(x) != (float32(lim)-1.0)/2.0 {
					mould[lim-1-x][y] = false
					nhole++
				}
			}

		case 5:
			{
				if (float32(y) != (float32(lim)-1.0)/2.0) && (float32(x) != (float32(lim)-1.0)/2.0) {
					mould[lim-1-x][y] = false
					nhole++
					mould[x][lim-1-y] = false
					nhole++
					mould[lim-1-x][lim-1-y] = false
					nhole++
				} else if float32(x) != (float32(lim)-1.0)/2.0 {
					mould[lim-1-x][y] = false
					nhole++
				} else if float32(y) != (float32(lim)-1.0)/2.0 {
					mould[x][lim-1-y] = false
					nhole++
				}
			}

		case 6:
			{
				if (x != y) || (x+y != lim-1) {
					mould[lim-1-y][x] = false
					nhole++
					mould[lim-1-x][lim-1-y] = false
					nhole++
					mould[y][lim-1-x] = false
					nhole++
				}
			}
		}
	}

	return mould
}

func Solver(board [][]int) ([][]int, error) {
	sizeBox := int(math.Floor(math.Sqrt(float64(len(board)))))
	for _, e := range board {
		if len(e) != sizeBox*sizeBox {
			return nil, errors.New("ASYMMETRIC BOARD")
		}
	}

	for true {
		dt, err := runSolver(copyArr(board), sizeBox)
		if err != nil {
			return nil, err
		}

		if Checker(dt) {
			return dt, nil
		} else {
			return dt, errors.New("INCORRECT SOLUTION")
		}
	}
	return nil, nil
}

func Checker(board [][]int) bool {
	sizeBox := int(math.Floor(math.Sqrt(float64(len(board)))))
	lim := sizeBox * sizeBox

	for _, e := range board {
		if len(e) != lim {
			return false
		}
	}

	for x := 0; x < lim; x++ {
		for y := 0; y < lim; y++ {
			if board[x][y] == 0 {
				return false
			}

			//Horizontal Checking
			for i := 0; i < lim; i++ {
				if (i != y) && (board[x][i] == board[x][y]) {
					return false
				}
			}

			//Vertical Checking
			for i := 0; i < lim; i++ {
				if (i != x) && (board[i][y] == board[x][y]) {
					return false
				}
			}

			//Box Checking
			boxX := int(math.Floor(float64(x) / float64(sizeBox)))
			boxY := int(math.Floor(float64(y) / float64(sizeBox)))
			for i := 0; i < sizeBox; i++ {
				for j := 0; j < sizeBox; j++ {
					if (boxX*sizeBox+i != x) && (boxY*sizeBox+j != y) && (board[boxX*sizeBox+i][boxY*sizeBox+j] == board[x][y]) {
						return false
					}
				}
			}

		}
	}
	return true
}

// ------------------------------------------ FILLER ------------------------------------------
func fill(sizeBox int, r *rand.Rand) [][]int {
	var blocking [][]int
	var dt [][]int
	lim := sizeBox * sizeBox

	for i := 0; i < lim; i++ {
		var dt1 []int
		for j := 0; j < lim; j++ {
			dt1 = append(dt1, 0)
			blocking = append(blocking, []int{})
		}
		dt = append(dt, dt1)
	}

	for i := 0; i < lim; i++ {
		for j := 0; j < lim; j++ {
			availNum := checkAvailability(i, j, dt, sizeBox)
			for _, e := range blocking[i*lim+j] {
				availNum = remArrCheck(availNum, e)
			}

			if len(availNum) > 0 {
				dt[i][j] = availNum[r.Intn(len(availNum))]
				for k := i*lim + j + 1; k < len(blocking); k++ {
					blocking[k] = []int{}
				}
			} else {
				if j == 0 {
					i -= 1
					j = lim - 2
				} else {
					j -= 2
				}

				blocking[i*lim+j+1] = append(blocking[i*lim+j+1], dt[i][j+1])
				dt[i][j+1] = 0
			}
		}
	}
	return dt
}

func checkAvailability(x int, y int, dt [][]int, sizeBox int) []int {
	var availNum []int
	lim := sizeBox * sizeBox

	for i := 0; i < lim; i++ {
		availNum = append(availNum, i+1)
	}

	//Horizontal Checking
	for i := 0; i < lim; i++ {
		if (i != y) && (dt[x][i] != 0) {
			availNum = remArrCheck(availNum, dt[x][i])
		}
	}

	//Vertical Checking
	for i := 0; i < lim; i++ {
		if (i != x) && (dt[i][y] != 0) {
			availNum = remArrCheck(availNum, dt[i][y])
		}
	}

	//Box Checking
	boxX := int(math.Floor(float64(x) / float64(sizeBox)))
	boxY := int(math.Floor(float64(y) / float64(sizeBox)))
	for i := 0; i < sizeBox; i++ {
		for j := 0; j < sizeBox; j++ {
			if (boxX*sizeBox+i != x) && (boxY*sizeBox+j != y) && (dt[boxX*sizeBox+i][boxY*sizeBox+j] != 0) {
				availNum = remArrCheck(availNum, dt[boxX*sizeBox+i][boxY*sizeBox+j])
			}
		}
	}

	return availNum
}

func quickFill(sizeBox int, r *rand.Rand) [][]int {
	var seed [][]int
	var dt [][]int
	switch sizeBox {
	case 3:
		dt = [][]int{
			{8, 5, 4, 7, 9, 2, 1, 6, 3},
			{1, 2, 7, 3, 6, 4, 8, 5, 9},
			{9, 3, 6, 1, 8, 5, 2, 4, 7},
			{5, 1, 3, 6, 7, 9, 4, 8, 2},
			{6, 8, 9, 4, 2, 3, 7, 1, 5},
			{7, 4, 2, 8, 5, 1, 9, 3, 6},
			{4, 9, 1, 2, 3, 6, 5, 7, 8},
			{2, 6, 8, 5, 1, 7, 3, 9, 4},
			{3, 7, 5, 9, 4, 8, 6, 2, 1},
		}
	case 4:
		dt = [][]int{
			{10, 6, 14, 1, 12, 11, 5, 13, 2, 3, 15, 4, 9, 7, 8, 16},
			{8, 7, 5, 2, 15, 4, 9, 3, 6, 1, 10, 16, 11, 12, 14, 13},
			{13, 9, 12, 3, 14, 10, 2, 16, 7, 5, 8, 11, 1, 15, 4, 6},
			{4, 11, 15, 16, 6, 8, 1, 7, 13, 12, 14, 9, 3, 2, 10, 5},
			{3, 14, 8, 13, 10, 15, 16, 9, 5, 2, 12, 1, 4, 11, 6, 7},
			{12, 15, 10, 7, 11, 3, 13, 8, 16, 6, 4, 14, 5, 9, 2, 1},
			{1, 4, 2, 11, 7, 5, 14, 6, 15, 9, 3, 13, 16, 10, 12, 8},
			{6, 5, 16, 9, 4, 2, 12, 1, 10, 8, 11, 7, 14, 3, 13, 15},
			{16, 1, 4, 12, 2, 6, 7, 5, 9, 10, 13, 15, 8, 14, 11, 3},
			{9, 10, 3, 15, 1, 16, 11, 4, 8, 14, 7, 12, 6, 13, 5, 2},
			{5, 8, 11, 14, 13, 9, 10, 15, 3, 16, 6, 2, 12, 1, 7, 4},
			{7, 2, 13, 6, 8, 14, 3, 12, 11, 4, 1, 5, 10, 16, 15, 9},
			{14, 3, 9, 10, 16, 13, 15, 2, 4, 11, 5, 6, 7, 8, 1, 12},
			{2, 12, 7, 5, 9, 1, 6, 11, 14, 13, 16, 8, 15, 4, 3, 10},
			{15, 16, 6, 4, 3, 12, 8, 14, 1, 7, 2, 10, 13, 5, 9, 11},
			{11, 13, 1, 8, 5, 7, 4, 10, 12, 15, 9, 3, 2, 6, 16, 14},
		}
	case 5:
		dt = [][]int{
			{2, 15, 20, 19, 10, 18, 5, 16, 21, 6, 3, 12, 1, 11, 17, 14, 25, 8, 23, 4, 9, 7, 24, 22, 13},
			{17, 23, 11, 13, 12, 24, 7, 22, 2, 8, 9, 4, 18, 25, 6, 20, 1, 19, 16, 3, 15, 21, 14, 10, 5},
			{22, 5, 8, 4, 24, 23, 25, 17, 10, 19, 16, 14, 20, 2, 7, 15, 11, 9, 21, 13, 12, 6, 1, 3, 18},
			{9, 3, 16, 6, 1, 12, 14, 15, 4, 20, 10, 13, 24, 5, 21, 17, 18, 2, 7, 22, 19, 25, 23, 11, 8},
			{7, 18, 14, 21, 25, 3, 11, 13, 1, 9, 8, 22, 15, 19, 23, 12, 6, 10, 5, 24, 2, 16, 20, 4, 17},
			{16, 12, 3, 15, 8, 14, 1, 19, 24, 7, 4, 17, 11, 13, 2, 23, 9, 20, 10, 18, 21, 5, 25, 6, 22},
			{20, 24, 1, 23, 4, 22, 16, 10, 13, 15, 12, 19, 3, 8, 5, 11, 7, 21, 25, 6, 14, 2, 18, 17, 9},
			{6, 9, 17, 10, 7, 4, 3, 20, 12, 2, 24, 25, 23, 21, 18, 16, 15, 22, 14, 5, 8, 11, 13, 1, 19},
			{11, 13, 19, 2, 22, 25, 9, 21, 5, 18, 14, 7, 10, 6, 20, 24, 4, 17, 1, 8, 16, 15, 3, 23, 12},
			{14, 21, 25, 18, 5, 8, 6, 11, 23, 17, 22, 1, 16, 9, 15, 3, 19, 13, 2, 12, 10, 20, 7, 24, 4},
			{13, 19, 12, 25, 15, 16, 8, 6, 7, 23, 2, 3, 4, 14, 24, 22, 17, 11, 18, 21, 1, 9, 10, 5, 20},
			{10, 1, 23, 11, 17, 5, 24, 25, 14, 21, 20, 15, 12, 18, 9, 13, 16, 7, 6, 19, 4, 3, 22, 8, 2},
			{8, 2, 22, 16, 9, 20, 17, 12, 15, 4, 5, 21, 19, 10, 13, 1, 24, 14, 3, 25, 7, 23, 6, 18, 11},
			{18, 14, 7, 24, 21, 2, 19, 9, 3, 11, 25, 8, 6, 1, 22, 4, 5, 23, 20, 10, 17, 12, 15, 13, 16},
			{5, 6, 4, 20, 3, 1, 13, 18, 22, 10, 23, 16, 7, 17, 11, 8, 2, 15, 12, 9, 25, 24, 19, 14, 21},
			{23, 4, 24, 8, 19, 17, 22, 1, 20, 16, 7, 2, 5, 15, 12, 21, 14, 18, 13, 11, 6, 10, 9, 25, 3},
			{15, 7, 18, 12, 16, 6, 23, 2, 25, 5, 1, 11, 13, 20, 14, 19, 10, 3, 9, 17, 22, 4, 8, 21, 24},
			{3, 10, 21, 5, 2, 11, 12, 24, 18, 13, 6, 9, 17, 4, 8, 7, 20, 25, 22, 15, 23, 14, 16, 19, 1},
			{1, 11, 6, 17, 13, 9, 21, 7, 8, 14, 19, 10, 22, 3, 25, 2, 23, 24, 4, 16, 20, 18, 5, 12, 15},
			{25, 22, 9, 14, 20, 15, 10, 4, 19, 3, 18, 23, 21, 24, 16, 6, 12, 5, 8, 1, 11, 13, 17, 2, 7},
			{19, 16, 2, 7, 18, 10, 4, 3, 11, 22, 17, 6, 14, 23, 1, 9, 13, 12, 24, 20, 5, 8, 21, 15, 25},
			{12, 20, 10, 3, 6, 7, 18, 14, 9, 1, 13, 5, 8, 22, 19, 25, 21, 4, 15, 2, 24, 17, 11, 16, 23},
			{4, 25, 5, 22, 14, 13, 15, 23, 17, 24, 21, 20, 2, 16, 3, 10, 8, 1, 11, 7, 18, 19, 12, 9, 6},
			{24, 17, 13, 9, 11, 21, 2, 8, 6, 12, 15, 18, 25, 7, 10, 5, 22, 16, 19, 23, 3, 1, 4, 20, 14},
			{21, 8, 15, 1, 23, 19, 20, 5, 16, 25, 11, 24, 9, 12, 4, 18, 3, 6, 17, 14, 13, 22, 2, 7, 10},
		}
	case 6:
		dt = [][]int{
			{10, 11, 12, 13, 14, 15, 8, 16, 17, 18, 19, 20, 3, 7, 21, 22, 4, 5, 23, 24, 25, 26, 27, 28, 29, 30, 0, 9, 31, 32, 1, 2, 33, 6, 34, 35},
			{22, 6, 5, 18, 0, 30, 4, 9, 32, 34, 35, 29, 31, 26, 19, 20, 27, 16, 7, 3, 1, 33, 2, 21, 12, 10, 23, 17, 28, 13, 11, 24, 25, 14, 8, 15},
			{32, 9, 33, 2, 4, 19, 7, 1, 3, 31, 30, 6, 23, 15, 14, 10, 17, 25, 35, 22, 5, 29, 34, 0, 11, 8, 27, 24, 18, 26, 20, 28, 16, 13, 12, 21},
			{3, 29, 34, 1, 7, 35, 0, 2, 22, 23, 21, 33, 13, 18, 28, 11, 12, 24, 30, 6, 4, 32, 8, 9, 20, 19, 15, 25, 14, 16, 26, 5, 17, 31, 10, 27},
			{16, 27, 20, 24, 23, 21, 13, 25, 11, 28, 14, 26, 35, 8, 34, 6, 33, 32, 12, 17, 10, 15, 18, 31, 5, 4, 22, 1, 7, 2, 9, 0, 3, 29, 30, 19},
			{26, 17, 25, 28, 8, 31, 15, 24, 10, 5, 27, 12, 29, 2, 9, 30, 0, 1, 13, 16, 20, 11, 14, 19, 21, 34, 3, 33, 35, 6, 22, 23, 32, 4, 7, 18},
			{20, 25, 10, 19, 31, 13, 14, 17, 26, 27, 15, 16, 33, 1, 18, 5, 35, 7, 28, 11, 12, 24, 23, 30, 6, 2, 34, 32, 21, 9, 3, 8, 4, 22, 29, 0},
			{11, 12, 26, 23, 18, 14, 31, 10, 25, 8, 2, 24, 28, 34, 22, 9, 30, 29, 19, 13, 17, 16, 15, 20, 33, 35, 4, 3, 0, 5, 6, 32, 1, 21, 27, 7},
			{17, 8, 24, 16, 15, 28, 35, 12, 20, 19, 13, 11, 21, 0, 4, 3, 32, 6, 27, 25, 26, 10, 31, 14, 22, 7, 29, 18, 30, 1, 33, 34, 5, 9, 23, 2},
			{1, 32, 6, 35, 21, 34, 18, 29, 33, 30, 28, 3, 2, 13, 11, 24, 25, 8, 4, 9, 7, 5, 0, 22, 27, 23, 14, 26, 16, 17, 10, 15, 12, 20, 19, 31},
			{5, 33, 3, 30, 2, 0, 23, 7, 9, 32, 4, 22, 16, 31, 27, 26, 15, 17, 29, 34, 21, 1, 6, 18, 10, 28, 8, 12, 19, 20, 24, 11, 13, 25, 35, 14},
			{29, 22, 4, 9, 27, 7, 21, 6, 5, 0, 34, 1, 14, 10, 23, 12, 19, 20, 2, 32, 33, 3, 35, 8, 15, 24, 31, 11, 13, 25, 17, 30, 26, 16, 18, 28},
			{21, 30, 7, 5, 26, 32, 2, 18, 29, 1, 22, 35, 24, 11, 16, 17, 28, 31, 3, 0, 9, 34, 33, 4, 25, 20, 6, 23, 8, 19, 27, 14, 15, 12, 13, 10},
			{2, 18, 1, 34, 22, 33, 3, 0, 21, 11, 6, 9, 12, 27, 32, 13, 26, 19, 5, 7, 30, 35, 10, 29, 17, 15, 24, 14, 4, 31, 23, 25, 28, 8, 16, 20},
			{9, 0, 35, 3, 29, 4, 5, 30, 34, 33, 32, 7, 20, 6, 25, 14, 8, 15, 1, 18, 2, 21, 22, 23, 13, 16, 10, 28, 12, 27, 31, 17, 19, 24, 26, 11},
			{8, 13, 27, 10, 17, 11, 28, 26, 15, 20, 25, 19, 9, 23, 33, 35, 7, 2, 16, 12, 31, 14, 24, 6, 18, 22, 5, 0, 32, 21, 30, 3, 29, 1, 4, 34},
			{23, 28, 15, 25, 6, 20, 24, 31, 27, 12, 16, 14, 1, 29, 10, 4, 34, 21, 17, 19, 13, 8, 32, 11, 9, 3, 26, 30, 2, 7, 18, 33, 22, 35, 0, 5},
			{12, 19, 14, 31, 24, 16, 10, 8, 13, 4, 17, 23, 5, 3, 30, 18, 22, 0, 20, 27, 15, 28, 26, 25, 35, 1, 33, 34, 11, 29, 2, 21, 7, 32, 6, 9},
			{13, 20, 31, 17, 10, 12, 9, 19, 28, 14, 26, 8, 7, 25, 6, 0, 18, 33, 24, 15, 27, 23, 11, 16, 3, 5, 21, 2, 22, 34, 32, 29, 35, 30, 1, 4},
			{30, 4, 21, 22, 5, 1, 25, 32, 18, 7, 29, 34, 26, 9, 20, 28, 23, 13, 6, 35, 0, 2, 3, 33, 24, 31, 17, 15, 10, 14, 19, 12, 8, 27, 11, 16},
			{19, 26, 8, 32, 9, 3, 12, 27, 23, 16, 20, 13, 15, 35, 24, 21, 1, 34, 10, 14, 28, 31, 25, 17, 4, 11, 18, 29, 33, 30, 0, 22, 2, 7, 5, 6},
			{0, 35, 18, 29, 33, 25, 22, 5, 4, 2, 3, 30, 17, 19, 8, 31, 10, 11, 26, 21, 32, 7, 1, 34, 16, 6, 12, 13, 27, 28, 15, 9, 14, 23, 20, 24},
			{27, 23, 28, 14, 16, 6, 17, 15, 24, 10, 11, 31, 30, 22, 5, 29, 2, 12, 9, 20, 8, 19, 4, 13, 0, 25, 32, 7, 1, 35, 21, 26, 34, 18, 3, 33},
			{7, 34, 2, 15, 11, 24, 1, 21, 35, 6, 33, 0, 32, 14, 3, 27, 16, 4, 22, 29, 18, 30, 12, 5, 23, 9, 19, 20, 26, 8, 13, 31, 10, 17, 28, 25},
			{28, 24, 19, 27, 20, 26, 16, 14, 8, 25, 12, 15, 6, 33, 0, 34, 9, 30, 11, 31, 23, 13, 17, 10, 1, 29, 2, 35, 3, 18, 7, 4, 21, 5, 32, 22},
			{14, 16, 23, 8, 25, 10, 11, 13, 31, 17, 24, 27, 22, 5, 29, 7, 21, 18, 15, 28, 19, 12, 20, 26, 34, 32, 9, 4, 6, 0, 35, 1, 30, 2, 33, 3},
			{18, 5, 0, 33, 32, 17, 30, 35, 6, 3, 1, 21, 25, 16, 2, 19, 13, 28, 34, 4, 22, 9, 29, 7, 14, 12, 11, 27, 15, 24, 8, 20, 23, 10, 31, 26},
			{35, 7, 9, 4, 1, 22, 33, 34, 0, 29, 5, 2, 11, 20, 26, 8, 14, 23, 32, 30, 6, 18, 21, 3, 19, 13, 25, 31, 17, 10, 28, 16, 27, 15, 24, 12},
			{15, 31, 13, 11, 12, 2, 20, 23, 19, 26, 10, 28, 4, 32, 17, 1, 3, 35, 25, 8, 14, 27, 16, 24, 30, 33, 7, 21, 5, 22, 34, 6, 18, 0, 9, 29},
			{34, 21, 30, 6, 3, 29, 32, 4, 7, 22, 9, 18, 27, 24, 12, 15, 31, 10, 33, 2, 35, 0, 5, 1, 28, 26, 16, 8, 20, 23, 25, 13, 11, 19, 14, 17},
			{4, 3, 22, 7, 28, 9, 29, 33, 2, 21, 0, 5, 10, 17, 31, 23, 24, 27, 18, 1, 34, 6, 30, 32, 8, 14, 35, 16, 25, 11, 12, 19, 20, 26, 15, 13},
			{24, 14, 16, 20, 19, 23, 26, 28, 12, 13, 8, 17, 18, 4, 15, 32, 5, 9, 31, 10, 11, 25, 7, 35, 2, 21, 1, 6, 34, 3, 29, 27, 0, 33, 22, 30},
			{33, 1, 32, 21, 34, 27, 6, 3, 30, 9, 7, 4, 0, 12, 35, 25, 11, 14, 8, 5, 29, 22, 13, 2, 26, 18, 20, 19, 24, 15, 16, 10, 31, 28, 17, 23},
			{6, 2, 29, 0, 35, 5, 34, 22, 1, 15, 18, 32, 19, 28, 13, 16, 20, 26, 21, 33, 3, 4, 9, 27, 31, 17, 30, 10, 23, 12, 14, 7, 24, 11, 25, 8},
			{25, 15, 11, 26, 13, 8, 27, 20, 16, 35, 31, 10, 34, 30, 1, 2, 29, 22, 14, 23, 24, 17, 19, 12, 7, 0, 28, 5, 9, 33, 4, 18, 6, 3, 21, 32},
			{31, 10, 17, 12, 30, 18, 19, 11, 14, 24, 23, 25, 8, 21, 7, 33, 6, 3, 0, 26, 16, 20, 28, 15, 32, 27, 13, 22, 29, 4, 5, 35, 9, 34, 2, 1},
		}
	case 7:
		dt = [][]int{
			{10, 11, 12, 13, 3, 14, 15, 16, 17, 9, 18, 19, 20, 6, 21, 22, 23, 1, 24, 4, 25, 26, 27, 28, 29, 2, 30, 31, 32, 8, 33, 34, 35, 36, 37, 38, 7, 39, 40, 41, 42, 43, 5, 44, 45, 46, 47, 48, 49},
			{4, 44, 17, 48, 5, 41, 45, 42, 1, 37, 49, 47, 33, 11, 39, 14, 27, 6, 26, 46, 9, 20, 32, 16, 38, 13, 3, 10, 2, 40, 24, 22, 28, 21, 12, 34, 8, 31, 15, 19, 30, 35, 18, 7, 43, 36, 29, 25, 23},
			{47, 28, 19, 2, 35, 43, 7, 5, 31, 14, 13, 10, 27, 23, 20, 29, 32, 36, 38, 42, 37, 9, 49, 12, 21, 18, 45, 44, 4, 1, 11, 17, 26, 25, 30, 33, 3, 46, 22, 16, 24, 48, 39, 8, 40, 15, 34, 41, 6},
			{29, 20, 42, 32, 49, 6, 27, 3, 28, 15, 2, 44, 39, 22, 7, 41, 5, 34, 47, 43, 31, 25, 1, 48, 23, 8, 36, 40, 13, 14, 45, 16, 18, 19, 46, 21, 17, 4, 11, 9, 12, 37, 26, 10, 35, 30, 38, 24, 33},
			{16, 33, 21, 25, 18, 26, 22, 36, 41, 40, 30, 24, 7, 32, 12, 13, 44, 10, 45, 11, 8, 35, 43, 14, 15, 46, 39, 34, 49, 3, 48, 47, 27, 38, 23, 29, 6, 28, 1, 20, 2, 5, 9, 19, 37, 4, 17, 42, 31},
			{39, 8, 30, 36, 46, 31, 23, 26, 45, 35, 48, 38, 29, 34, 28, 49, 33, 19, 2, 15, 40, 24, 42, 5, 7, 37, 17, 4, 10, 6, 44, 20, 9, 43, 41, 27, 47, 14, 13, 25, 32, 18, 21, 3, 1, 11, 16, 12, 22},
			{37, 9, 1, 24, 34, 38, 40, 43, 46, 8, 25, 21, 12, 4, 16, 17, 48, 18, 35, 30, 3, 19, 33, 41, 11, 22, 6, 47, 7, 5, 42, 15, 31, 39, 29, 45, 26, 49, 44, 36, 23, 10, 2, 13, 20, 32, 27, 28, 14},
			{20, 24, 27, 7, 39, 1, 6, 8, 33, 3, 38, 45, 16, 26, 4, 9, 35, 21, 13, 44, 2, 31, 28, 46, 42, 47, 14, 22, 37, 23, 10, 32, 30, 17, 49, 18, 11, 34, 25, 12, 19, 29, 48, 40, 36, 41, 5, 43, 15},
			{49, 12, 36, 47, 26, 28, 44, 48, 5, 39, 10, 34, 1, 27, 17, 15, 11, 16, 22, 20, 19, 30, 45, 23, 3, 32, 43, 41, 40, 25, 4, 29, 7, 46, 13, 42, 2, 24, 33, 21, 14, 9, 8, 31, 6, 37, 35, 38, 18},
			{21, 15, 16, 38, 25, 23, 10, 17, 44, 18, 7, 22, 4, 29, 31, 30, 42, 37, 48, 32, 36, 1, 39, 34, 19, 11, 13, 24, 28, 27, 43, 8, 14, 45, 20, 49, 46, 5, 35, 6, 41, 40, 12, 9, 47, 2, 33, 26, 3},
			{46, 41, 13, 34, 43, 45, 8, 40, 35, 47, 24, 42, 49, 19, 33, 10, 26, 27, 6, 18, 14, 15, 20, 9, 36, 7, 21, 37, 3, 39, 5, 2, 12, 48, 38, 31, 22, 30, 17, 44, 4, 23, 32, 28, 25, 16, 11, 29, 1},
			{14, 48, 2, 17, 37, 35, 42, 13, 21, 23, 43, 30, 41, 36, 29, 24, 3, 39, 8, 28, 5, 38, 40, 25, 33, 26, 18, 12, 6, 9, 1, 19, 47, 31, 11, 16, 27, 20, 7, 45, 15, 32, 4, 46, 49, 22, 10, 44, 34},
			{18, 40, 31, 9, 4, 32, 33, 28, 37, 46, 11, 25, 2, 12, 38, 23, 47, 45, 49, 41, 1, 27, 8, 6, 17, 5, 16, 29, 36, 44, 15, 21, 22, 34, 35, 43, 48, 13, 3, 39, 10, 26, 42, 14, 7, 20, 24, 19, 30},
			{30, 5, 29, 19, 22, 11, 3, 32, 14, 31, 6, 15, 9, 20, 25, 43, 40, 7, 46, 12, 34, 49, 48, 44, 2, 10, 4, 35, 26, 16, 41, 18, 42, 33, 24, 28, 1, 8, 47, 37, 38, 36, 13, 17, 39, 23, 21, 45, 27},
			{11, 14, 40, 23, 7, 49, 5, 45, 12, 6, 44, 33, 24, 46, 30, 3, 16, 22, 15, 37, 27, 36, 18, 20, 47, 35, 19, 9, 17, 32, 29, 38, 2, 1, 39, 26, 34, 41, 4, 31, 21, 28, 43, 25, 48, 8, 42, 10, 13},
			{25, 37, 26, 35, 24, 46, 43, 38, 40, 21, 23, 36, 30, 39, 42, 32, 45, 47, 44, 19, 33, 12, 16, 22, 34, 6, 11, 48, 20, 10, 8, 31, 13, 7, 4, 5, 14, 15, 27, 49, 3, 1, 28, 41, 9, 17, 18, 2, 29},
			{28, 4, 8, 10, 17, 36, 9, 15, 26, 41, 35, 32, 42, 13, 40, 18, 34, 29, 23, 5, 6, 39, 31, 49, 24, 27, 37, 21, 14, 45, 25, 48, 3, 11, 47, 30, 33, 16, 43, 2, 22, 46, 7, 1, 19, 38, 44, 20, 12},
			{34, 3, 39, 16, 15, 20, 48, 37, 22, 28, 27, 18, 17, 10, 46, 21, 9, 26, 36, 35, 41, 45, 2, 43, 1, 40, 7, 33, 5, 49, 6, 44, 19, 24, 42, 25, 12, 29, 32, 38, 8, 13, 31, 4, 30, 14, 23, 47, 11},
			{12, 47, 45, 29, 21, 22, 18, 9, 11, 16, 1, 31, 25, 14, 43, 7, 4, 17, 10, 2, 13, 23, 44, 30, 28, 41, 38, 8, 33, 36, 34, 46, 37, 27, 40, 35, 19, 42, 6, 48, 20, 24, 15, 5, 3, 39, 49, 32, 26},
			{1, 31, 32, 41, 2, 44, 38, 29, 47, 4, 3, 20, 19, 5, 24, 25, 8, 11, 39, 49, 48, 10, 26, 42, 14, 15, 46, 13, 9, 43, 12, 30, 21, 28, 22, 40, 37, 36, 23, 18, 7, 17, 34, 6, 16, 33, 45, 27, 35},
			{42, 6, 33, 30, 27, 13, 19, 49, 48, 43, 8, 7, 34, 2, 1, 38, 31, 20, 12, 14, 28, 32, 25, 4, 5, 17, 29, 3, 41, 26, 16, 23, 15, 35, 18, 9, 39, 11, 45, 10, 44, 47, 24, 37, 22, 40, 36, 21, 46},
			{15, 42, 5, 26, 20, 33, 31, 23, 38, 13, 36, 29, 11, 17, 22, 47, 21, 30, 40, 7, 45, 34, 37, 39, 18, 28, 44, 25, 24, 19, 3, 6, 10, 41, 27, 14, 49, 12, 16, 8, 9, 4, 46, 35, 32, 48, 2, 1, 43},
			{27, 1, 25, 22, 48, 40, 46, 20, 16, 32, 47, 8, 14, 9, 5, 34, 29, 28, 41, 26, 15, 4, 21, 45, 49, 12, 33, 11, 30, 37, 23, 7, 36, 18, 44, 10, 35, 19, 31, 3, 43, 2, 6, 24, 13, 42, 39, 17, 38},
			{8, 18, 24, 11, 23, 7, 28, 34, 39, 30, 42, 12, 44, 3, 48, 36, 25, 43, 14, 9, 10, 5, 47, 32, 16, 20, 26, 15, 29, 22, 35, 13, 46, 2, 17, 41, 45, 6, 38, 1, 33, 27, 49, 21, 4, 19, 31, 40, 37},
			{36, 29, 14, 45, 30, 10, 12, 25, 15, 27, 22, 43, 35, 31, 13, 46, 24, 4, 17, 39, 23, 3, 6, 1, 48, 19, 9, 2, 21, 28, 26, 33, 38, 49, 8, 7, 32, 18, 34, 40, 37, 42, 47, 11, 5, 44, 41, 16, 20},
			{32, 2, 4, 49, 6, 37, 17, 24, 18, 48, 19, 40, 26, 45, 11, 35, 38, 33, 3, 8, 20, 42, 10, 29, 41, 23, 22, 27, 31, 47, 14, 1, 16, 5, 43, 15, 44, 21, 39, 13, 46, 25, 36, 34, 28, 12, 30, 9, 7},
			{41, 21, 34, 39, 47, 19, 35, 6, 4, 1, 28, 46, 37, 33, 32, 12, 49, 2, 27, 16, 44, 7, 24, 13, 40, 43, 31, 38, 11, 20, 9, 42, 48, 15, 25, 22, 29, 17, 36, 26, 5, 30, 3, 23, 10, 18, 8, 14, 45},
			{9, 16, 44, 43, 38, 3, 13, 2, 7, 49, 41, 5, 10, 21, 19, 37, 1, 31, 18, 6, 42, 46, 14, 17, 8, 36, 35, 30, 39, 4, 32, 12, 45, 40, 34, 23, 24, 47, 48, 28, 11, 20, 27, 26, 15, 29, 22, 33, 25},
			{3, 38, 6, 33, 44, 2, 20, 14, 24, 42, 46, 17, 15, 47, 34, 40, 37, 48, 43, 27, 39, 18, 19, 26, 13, 4, 28, 45, 16, 41, 49, 9, 1, 10, 5, 11, 21, 25, 30, 22, 35, 31, 23, 32, 29, 7, 12, 36, 8},
			{43, 13, 46, 31, 19, 27, 16, 18, 9, 33, 37, 35, 32, 49, 3, 4, 2, 12, 28, 38, 17, 21, 29, 10, 30, 14, 15, 20, 44, 42, 22, 26, 6, 8, 45, 47, 23, 7, 24, 5, 36, 41, 40, 39, 11, 25, 1, 34, 48},
			{5, 32, 15, 21, 28, 39, 25, 10, 27, 2, 29, 26, 43, 38, 47, 8, 7, 49, 33, 36, 35, 16, 3, 31, 37, 48, 40, 1, 46, 13, 30, 4, 11, 23, 14, 6, 9, 44, 18, 34, 45, 12, 20, 42, 41, 24, 19, 22, 17},
			{22, 34, 35, 18, 40, 4, 47, 21, 19, 11, 31, 1, 28, 7, 14, 20, 41, 15, 25, 24, 29, 6, 5, 2, 39, 9, 23, 43, 48, 17, 36, 27, 32, 12, 3, 8, 10, 38, 37, 42, 49, 33, 44, 30, 26, 45, 13, 46, 16},
			{26, 10, 23, 8, 1, 29, 49, 4, 36, 25, 34, 16, 22, 41, 9, 6, 46, 42, 30, 45, 11, 47, 35, 24, 44, 33, 12, 17, 18, 7, 28, 40, 43, 20, 15, 32, 13, 48, 2, 14, 39, 19, 38, 27, 31, 21, 3, 37, 5},
			{45, 7, 48, 12, 41, 42, 30, 44, 3, 20, 40, 13, 23, 8, 26, 5, 19, 32, 16, 10, 22, 11, 38, 27, 46, 34, 25, 36, 35, 33, 21, 24, 39, 37, 31, 17, 4, 1, 28, 43, 29, 15, 14, 47, 18, 49, 9, 6, 2},
			{24, 36, 9, 37, 14, 17, 11, 12, 6, 5, 39, 48, 45, 30, 18, 1, 13, 44, 31, 23, 21, 22, 41, 8, 32, 49, 42, 7, 47, 2, 38, 25, 34, 29, 19, 20, 40, 26, 46, 27, 16, 3, 35, 43, 33, 28, 4, 15, 10},
			{17, 22, 47, 28, 9, 21, 37, 11, 10, 44, 32, 49, 46, 1, 36, 16, 20, 38, 19, 34, 26, 33, 23, 7, 45, 31, 8, 42, 25, 18, 2, 43, 5, 30, 6, 3, 41, 27, 12, 35, 40, 14, 29, 48, 24, 13, 15, 39, 4},
			{13, 30, 38, 44, 36, 8, 39, 19, 34, 22, 16, 27, 40, 18, 6, 28, 15, 41, 21, 1, 32, 37, 12, 35, 26, 24, 48, 46, 42, 29, 20, 3, 4, 9, 33, 2, 5, 43, 49, 23, 17, 7, 11, 45, 14, 10, 25, 31, 47},
			{40, 23, 20, 1, 16, 15, 32, 41, 30, 24, 21, 4, 13, 43, 44, 31, 39, 8, 11, 48, 18, 17, 36, 38, 10, 25, 34, 6, 12, 35, 46, 45, 49, 14, 7, 19, 42, 33, 29, 47, 26, 22, 37, 2, 27, 3, 28, 5, 9},
			{19, 46, 41, 6, 31, 48, 26, 35, 29, 12, 15, 39, 5, 28, 2, 27, 22, 3, 9, 13, 7, 44, 4, 18, 43, 16, 47, 14, 8, 24, 37, 11, 17, 32, 21, 36, 25, 45, 10, 30, 34, 38, 33, 49, 42, 1, 20, 23, 40},
			{35, 49, 3, 42, 45, 5, 24, 31, 23, 38, 14, 9, 8, 25, 37, 33, 30, 40, 4, 47, 43, 29, 13, 21, 27, 1, 2, 19, 22, 48, 39, 41, 44, 16, 10, 46, 28, 32, 20, 15, 6, 11, 17, 12, 34, 26, 7, 18, 36},
			{2, 43, 11, 27, 33, 12, 14, 47, 20, 7, 17, 3, 6, 42, 49, 45, 10, 24, 29, 25, 46, 28, 22, 40, 9, 30, 5, 39, 34, 15, 31, 36, 23, 13, 26, 48, 18, 37, 21, 4, 1, 16, 19, 38, 44, 35, 32, 8, 41},
			{7, 25, 10, 4, 29, 18, 34, 33, 2, 26, 45, 37, 36, 48, 23, 42, 14, 35, 5, 17, 12, 41, 15, 11, 20, 3, 49, 32, 27, 38, 19, 28, 40, 47, 1, 44, 31, 9, 8, 24, 13, 39, 22, 16, 46, 6, 43, 30, 21},
			{33, 27, 7, 46, 42, 47, 4, 39, 25, 10, 26, 28, 48, 44, 35, 19, 43, 5, 34, 40, 16, 14, 17, 15, 22, 45, 1, 23, 38, 31, 13, 49, 8, 6, 32, 12, 36, 3, 41, 29, 18, 21, 30, 20, 2, 9, 37, 11, 24},
			{48, 35, 37, 20, 8, 9, 29, 30, 49, 36, 5, 41, 47, 16, 45, 39, 18, 23, 7, 21, 4, 40, 11, 3, 12, 38, 10, 28, 15, 46, 27, 14, 25, 42, 2, 24, 43, 22, 19, 32, 31, 6, 1, 33, 17, 34, 26, 13, 44},
			{44, 45, 28, 14, 13, 24, 36, 22, 43, 34, 20, 11, 18, 40, 27, 2, 12, 46, 32, 33, 38, 48, 30, 47, 35, 42, 41, 5, 1, 21, 7, 39, 29, 3, 9, 37, 16, 23, 26, 17, 25, 49, 10, 15, 8, 31, 6, 4, 19},
			{6, 39, 43, 3, 11, 34, 41, 27, 42, 17, 12, 14, 21, 37, 15, 26, 36, 25, 1, 29, 49, 2, 46, 19, 31, 44, 20, 18, 45, 30, 40, 35, 24, 4, 28, 13, 38, 10, 9, 33, 47, 8, 16, 22, 23, 5, 48, 7, 32},
			{23, 26, 49, 15, 32, 25, 21, 1, 8, 19, 4, 2, 31, 35, 10, 11, 17, 9, 37, 22, 30, 13, 34, 36, 6, 29, 24, 16, 43, 12, 47, 5, 33, 44, 48, 39, 20, 40, 14, 7, 28, 45, 41, 18, 38, 27, 46, 3, 42},
			{38, 17, 22, 40, 12, 30, 1, 7, 32, 29, 33, 23, 3, 24, 41, 44, 6, 13, 42, 31, 47, 8, 9, 37, 25, 39, 27, 49, 19, 11, 18, 10, 20, 26, 16, 4, 15, 2, 5, 46, 48, 34, 45, 36, 21, 43, 14, 35, 28},
			{31, 19, 18, 5, 10, 16, 2, 46, 13, 45, 9, 6, 38, 15, 8, 48, 28, 14, 20, 3, 24, 43, 7, 33, 4, 21, 32, 26, 23, 34, 17, 37, 41, 22, 36, 1, 30, 35, 42, 11, 27, 44, 25, 29, 12, 47, 40, 49, 39},
		}
	case 8:
		dt = [][]int{
			{10, 11, 7, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 3, 23, 24, 6, 25, 26, 27, 28, 29, 30, 31, 4, 32, 1, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 8, 51, 52, 53, 54, 55, 56, 57, 2, 58, 59, 60, 5, 61, 62, 63, 9, 64},
			{47, 57, 51, 36, 41, 26, 27, 23, 30, 31, 24, 34, 52, 4, 64, 56, 49, 43, 22, 63, 54, 2, 53, 8, 39, 12, 16, 38, 44, 58, 18, 50, 10, 45, 15, 59, 61, 20, 29, 21, 17, 25, 40, 19, 33, 28, 11, 37, 60, 9, 42, 3, 35, 32, 62, 5, 55, 46, 6, 7, 13, 1, 48, 14},
			{38, 40, 54, 1, 5, 52, 21, 32, 25, 39, 44, 51, 7, 46, 27, 43, 57, 11, 33, 12, 18, 58, 64, 16, 30, 28, 45, 47, 56, 3, 42, 17, 23, 36, 49, 14, 35, 48, 63, 26, 34, 9, 20, 55, 31, 41, 62, 60, 37, 8, 61, 6, 24, 59, 22, 13, 50, 2, 4, 53, 10, 29, 19, 15},
			{39, 18, 53, 34, 22, 62, 43, 6, 36, 13, 29, 42, 48, 59, 1, 47, 38, 14, 7, 9, 37, 17, 60, 19, 55, 10, 21, 61, 2, 54, 27, 15, 3, 12, 30, 32, 58, 52, 16, 11, 26, 4, 56, 44, 63, 57, 64, 5, 49, 50, 45, 20, 51, 41, 28, 46, 35, 33, 24, 8, 40, 31, 23, 25},
			{50, 60, 44, 24, 55, 59, 48, 46, 61, 40, 9, 41, 11, 14, 45, 10, 23, 1, 51, 62, 13, 21, 5, 47, 37, 26, 29, 63, 52, 25, 64, 20, 33, 27, 18, 8, 4, 6, 31, 19, 16, 12, 15, 58, 54, 2, 53, 35, 39, 30, 43, 17, 34, 7, 38, 36, 22, 49, 57, 3, 42, 56, 28, 32},
			{2, 29, 64, 9, 58, 30, 19, 35, 62, 54, 38, 57, 53, 37, 50, 15, 32, 59, 4, 39, 41, 46, 36, 52, 49, 22, 51, 13, 11, 5, 6, 8, 60, 24, 56, 7, 28, 25, 1, 55, 3, 10, 23, 43, 21, 14, 42, 61, 44, 16, 12, 33, 40, 48, 63, 31, 34, 20, 45, 17, 26, 27, 47, 18},
			{8, 56, 17, 63, 31, 20, 37, 45, 26, 49, 33, 28, 5, 35, 55, 60, 48, 40, 50, 10, 42, 3, 15, 61, 23, 19, 62, 9, 14, 24, 53, 57, 22, 64, 34, 47, 46, 2, 54, 13, 6, 36, 39, 30, 59, 32, 52, 7, 25, 27, 4, 21, 11, 1, 18, 29, 51, 43, 41, 16, 38, 12, 44, 58},
			{4, 28, 33, 42, 49, 3, 61, 25, 8, 63, 2, 16, 58, 6, 12, 32, 56, 45, 55, 20, 44, 35, 31, 34, 46, 60, 48, 40, 59, 41, 43, 7, 62, 57, 50, 51, 53, 17, 5, 9, 1, 29, 22, 18, 38, 24, 13, 27, 47, 23, 64, 14, 10, 19, 15, 26, 21, 36, 37, 52, 30, 39, 11, 54},
			{28, 42, 22, 43, 4, 18, 17, 44, 14, 36, 35, 31, 34, 11, 62, 30, 63, 25, 24, 37, 61, 29, 12, 2, 13, 9, 3, 53, 6, 21, 7, 49, 54, 40, 41, 16, 64, 38, 46, 52, 8, 27, 5, 59, 56, 48, 45, 32, 58, 10, 1, 39, 55, 60, 33, 20, 19, 57, 51, 23, 50, 26, 15, 47},
			{48, 32, 39, 47, 2, 51, 41, 33, 23, 27, 43, 5, 37, 15, 63, 1, 60, 52, 17, 50, 26, 14, 4, 18, 10, 59, 24, 8, 16, 28, 38, 30, 49, 21, 19, 12, 34, 57, 9, 35, 29, 20, 42, 25, 58, 22, 61, 44, 7, 54, 36, 53, 62, 31, 45, 56, 11, 40, 55, 6, 46, 3, 64, 13},
			{20, 19, 46, 54, 59, 15, 5, 13, 7, 6, 55, 52, 28, 8, 41, 58, 44, 33, 40, 48, 10, 43, 30, 64, 51, 23, 47, 32, 4, 57, 17, 29, 53, 60, 11, 26, 14, 27, 50, 1, 31, 24, 36, 16, 35, 39, 37, 34, 18, 3, 21, 61, 12, 25, 9, 38, 45, 56, 22, 49, 63, 42, 62, 2},
			{26, 24, 23, 27, 52, 40, 49, 21, 3, 47, 48, 39, 2, 57, 9, 61, 1, 22, 38, 46, 15, 41, 6, 59, 44, 18, 50, 35, 58, 55, 54, 14, 4, 28, 7, 42, 56, 13, 51, 45, 64, 60, 10, 11, 53, 19, 63, 62, 16, 5, 29, 32, 37, 34, 8, 17, 12, 31, 25, 33, 36, 20, 30, 43},
			{55, 62, 31, 16, 57, 64, 45, 14, 42, 33, 46, 18, 10, 44, 40, 25, 5, 21, 9, 58, 35, 56, 19, 49, 11, 52, 36, 48, 26, 27, 41, 60, 20, 43, 61, 23, 63, 47, 39, 29, 28, 7, 54, 15, 2, 6, 3, 12, 13, 4, 22, 24, 50, 51, 59, 30, 32, 37, 8, 1, 34, 53, 17, 38},
			{56, 9, 61, 53, 37, 11, 63, 38, 13, 24, 17, 59, 50, 19, 16, 26, 7, 42, 28, 54, 57, 31, 32, 23, 20, 43, 15, 34, 1, 45, 12, 40, 8, 3, 55, 33, 25, 62, 22, 36, 30, 18, 21, 41, 47, 51, 4, 49, 14, 64, 35, 52, 6, 27, 46, 2, 39, 10, 29, 44, 60, 5, 58, 48},
			{36, 12, 60, 10, 29, 8, 35, 30, 51, 20, 49, 45, 56, 38, 32, 53, 62, 27, 3, 34, 11, 55, 13, 39, 5, 37, 64, 25, 61, 42, 22, 63, 17, 6, 48, 44, 15, 31, 58, 2, 9, 50, 57, 46, 14, 52, 1, 33, 19, 26, 41, 23, 28, 47, 40, 43, 54, 21, 7, 4, 16, 18, 59, 24},
			{34, 7, 50, 6, 1, 58, 25, 3, 29, 60, 64, 54, 4, 12, 22, 21, 47, 51, 53, 45, 20, 16, 8, 36, 2, 62, 46, 19, 31, 56, 39, 33, 18, 37, 5, 24, 32, 59, 30, 10, 38, 13, 43, 17, 55, 26, 23, 40, 63, 57, 15, 42, 44, 49, 48, 11, 27, 52, 9, 41, 61, 14, 35, 28},
			{57, 15, 48, 55, 9, 33, 18, 17, 6, 28, 60, 47, 64, 2, 5, 38, 3, 4, 14, 21, 12, 19, 44, 22, 8, 11, 35, 41, 29, 39, 59, 1, 45, 7, 31, 63, 37, 50, 25, 49, 20, 40, 61, 54, 51, 53, 32, 56, 46, 24, 13, 10, 43, 26, 30, 62, 36, 23, 52, 42, 27, 58, 16, 34},
			{3, 10, 62, 46, 53, 1, 36, 27, 12, 61, 23, 43, 51, 50, 39, 22, 8, 63, 16, 32, 31, 42, 2, 6, 57, 40, 14, 24, 17, 19, 26, 52, 47, 18, 60, 54, 11, 21, 55, 34, 35, 37, 28, 33, 45, 44, 5, 29, 48, 58, 25, 9, 49, 38, 64, 7, 13, 59, 56, 20, 15, 30, 41, 4},
			{16, 30, 35, 31, 54, 24, 4, 63, 1, 62, 25, 37, 33, 20, 58, 45, 50, 15, 41, 40, 38, 47, 26, 51, 9, 44, 2, 49, 13, 12, 46, 53, 59, 22, 29, 10, 43, 28, 19, 64, 27, 14, 34, 6, 3, 18, 7, 48, 57, 60, 52, 11, 36, 42, 56, 23, 5, 32, 39, 21, 55, 8, 61, 17},
			{59, 34, 56, 21, 7, 12, 32, 61, 55, 10, 16, 46, 63, 30, 17, 44, 29, 20, 60, 52, 1, 25, 45, 33, 6, 54, 22, 28, 18, 37, 62, 27, 58, 8, 51, 2, 9, 4, 15, 41, 47, 23, 11, 24, 42, 13, 43, 36, 35, 14, 39, 5, 3, 50, 53, 40, 64, 38, 48, 26, 57, 49, 31, 19},
			{14, 52, 8, 45, 43, 38, 64, 19, 56, 42, 3, 35, 40, 31, 13, 27, 28, 34, 62, 61, 24, 7, 11, 54, 16, 48, 58, 15, 51, 23, 20, 5, 44, 32, 17, 57, 26, 53, 36, 39, 59, 22, 55, 4, 30, 49, 21, 2, 1, 6, 37, 18, 47, 29, 41, 33, 63, 25, 50, 60, 9, 46, 12, 10},
			{5, 25, 29, 37, 44, 47, 13, 58, 19, 8, 59, 7, 36, 53, 26, 54, 30, 39, 64, 17, 49, 23, 48, 57, 38, 56, 60, 43, 45, 33, 61, 4, 40, 14, 16, 52, 1, 46, 20, 42, 15, 31, 41, 62, 10, 9, 50, 63, 34, 21, 2, 51, 32, 12, 27, 55, 18, 24, 3, 11, 35, 28, 22, 6},
			{42, 41, 26, 22, 28, 50, 6, 39, 15, 57, 52, 21, 49, 29, 18, 11, 36, 53, 46, 55, 56, 13, 35, 9, 47, 64, 63, 3, 34, 10, 32, 25, 27, 48, 38, 62, 24, 5, 23, 30, 12, 1, 60, 8, 19, 58, 16, 17, 45, 44, 20, 54, 4, 61, 31, 59, 14, 51, 2, 43, 7, 33, 37, 40},
			{40, 49, 11, 23, 60, 2, 51, 20, 48, 4, 41, 14, 32, 9, 34, 24, 43, 18, 58, 59, 5, 37, 27, 10, 21, 50, 30, 36, 7, 31, 55, 42, 35, 33, 13, 56, 3, 61, 12, 6, 39, 38, 64, 57, 25, 46, 26, 52, 8, 15, 17, 22, 63, 16, 19, 28, 53, 44, 62, 29, 47, 45, 54, 1},
			{9, 38, 43, 25, 26, 42, 11, 40, 54, 56, 39, 4, 20, 55, 33, 2, 12, 47, 49, 53, 29, 32, 61, 58, 27, 5, 34, 52, 36, 48, 24, 35, 13, 10, 64, 22, 7, 8, 17, 37, 63, 15, 59, 51, 46, 3, 60, 23, 41, 1, 30, 28, 21, 62, 44, 14, 57, 19, 18, 31, 45, 16, 6, 50},
			{12, 4, 28, 20, 39, 45, 47, 55, 38, 48, 6, 19, 30, 42, 46, 49, 37, 3, 59, 31, 25, 51, 14, 27, 60, 63, 26, 18, 53, 62, 2, 16, 36, 35, 58, 11, 44, 41, 40, 50, 57, 43, 29, 1, 13, 64, 17, 24, 33, 56, 23, 34, 7, 52, 54, 22, 61, 9, 15, 10, 8, 32, 5, 21},
			{30, 14, 34, 17, 8, 29, 46, 10, 53, 23, 36, 27, 26, 58, 11, 41, 39, 64, 19, 28, 60, 20, 38, 40, 3, 57, 54, 51, 9, 22, 21, 61, 32, 16, 6, 18, 33, 49, 24, 4, 56, 48, 2, 35, 44, 42, 31, 47, 43, 13, 5, 12, 45, 15, 25, 50, 62, 63, 59, 55, 52, 7, 1, 37},
			{15, 23, 57, 2, 64, 60, 24, 49, 45, 35, 31, 1, 9, 52, 44, 16, 46, 5, 36, 30, 21, 33, 54, 11, 19, 25, 41, 39, 43, 20, 37, 55, 34, 59, 42, 53, 12, 56, 62, 3, 58, 32, 50, 7, 22, 8, 28, 4, 38, 51, 63, 29, 18, 10, 61, 6, 40, 48, 13, 14, 17, 47, 27, 26},
			{54, 27, 37, 19, 6, 21, 50, 5, 10, 51, 15, 63, 3, 13, 7, 34, 18, 26, 57, 2, 62, 44, 17, 42, 59, 38, 33, 46, 64, 1, 29, 23, 28, 9, 47, 48, 31, 14, 45, 25, 41, 11, 12, 61, 52, 40, 36, 55, 32, 35, 49, 58, 8, 4, 20, 16, 56, 30, 60, 22, 43, 24, 39, 53},
			{22, 53, 36, 44, 56, 32, 52, 48, 40, 25, 21, 24, 59, 62, 8, 17, 6, 50, 45, 1, 43, 9, 10, 13, 12, 30, 4, 7, 28, 49, 11, 31, 2, 39, 63, 15, 57, 29, 60, 61, 14, 5, 27, 26, 18, 33, 34, 16, 42, 19, 3, 64, 46, 37, 55, 47, 58, 35, 23, 54, 41, 38, 20, 51},
			{31, 35, 16, 41, 61, 13, 1, 59, 57, 43, 5, 22, 47, 64, 29, 18, 55, 8, 56, 15, 23, 52, 63, 7, 40, 14, 6, 10, 32, 50, 45, 58, 51, 54, 21, 30, 38, 19, 27, 46, 25, 62, 49, 37, 9, 20, 39, 53, 2, 48, 26, 36, 17, 11, 24, 60, 3, 28, 34, 12, 4, 44, 33, 42},
			{7, 51, 58, 33, 18, 63, 3, 62, 28, 12, 32, 61, 14, 60, 37, 50, 35, 41, 48, 22, 16, 24, 34, 4, 17, 47, 42, 56, 8, 44, 15, 13, 26, 1, 23, 55, 20, 43, 52, 5, 54, 19, 38, 21, 6, 30, 10, 45, 9, 31, 57, 27, 59, 40, 39, 53, 49, 64, 46, 25, 11, 2, 36, 29},
			{53, 37, 25, 50, 42, 34, 59, 1, 35, 7, 26, 32, 27, 28, 60, 62, 20, 29, 15, 23, 6, 57, 52, 44, 33, 16, 8, 31, 3, 64, 47, 41, 61, 56, 4, 46, 19, 10, 14, 40, 48, 30, 63, 49, 11, 45, 51, 22, 17, 43, 24, 38, 39, 54, 5, 18, 2, 58, 21, 36, 12, 13, 55, 9},
			{58, 16, 14, 32, 19, 57, 26, 22, 18, 37, 8, 33, 29, 48, 36, 39, 51, 60, 43, 38, 50, 12, 21, 46, 35, 1, 23, 27, 30, 13, 4, 10, 7, 17, 9, 64, 45, 15, 2, 47, 42, 61, 53, 28, 24, 31, 44, 41, 56, 52, 62, 49, 20, 55, 34, 63, 25, 11, 54, 40, 6, 59, 3, 5},
			{23, 21, 15, 38, 17, 43, 62, 41, 64, 52, 22, 3, 16, 51, 54, 6, 31, 7, 8, 18, 28, 30, 1, 14, 61, 49, 9, 59, 60, 63, 34, 56, 55, 5, 36, 50, 13, 35, 32, 48, 37, 33, 58, 27, 29, 10, 2, 19, 40, 11, 46, 26, 25, 53, 42, 12, 44, 39, 47, 24, 20, 4, 45, 57},
			{29, 47, 40, 5, 45, 56, 28, 7, 24, 17, 30, 23, 41, 34, 49, 14, 13, 36, 61, 35, 59, 22, 55, 25, 48, 42, 44, 37, 46, 2, 50, 39, 21, 20, 8, 38, 51, 54, 11, 12, 4, 3, 6, 32, 16, 62, 57, 9, 10, 33, 58, 60, 15, 64, 1, 27, 43, 18, 26, 63, 31, 19, 53, 52},
			{60, 44, 63, 39, 10, 55, 20, 52, 31, 19, 57, 9, 15, 56, 42, 5, 26, 62, 2, 11, 47, 64, 16, 48, 54, 6, 28, 29, 25, 17, 40, 24, 1, 58, 27, 43, 59, 37, 3, 53, 13, 21, 7, 23, 36, 12, 18, 14, 61, 32, 8, 41, 22, 45, 35, 4, 46, 50, 33, 34, 49, 51, 38, 30},
			{51, 6, 12, 48, 30, 35, 31, 64, 63, 21, 10, 53, 55, 47, 25, 46, 17, 54, 27, 24, 39, 4, 37, 45, 18, 15, 43, 11, 5, 14, 58, 26, 52, 34, 33, 60, 49, 22, 44, 57, 50, 59, 1, 20, 40, 56, 38, 8, 29, 7, 9, 19, 2, 13, 36, 3, 28, 62, 61, 32, 23, 41, 42, 16},
			{11, 13, 24, 61, 33, 36, 2, 8, 4, 58, 20, 50, 43, 40, 38, 12, 19, 9, 5, 41, 63, 49, 3, 32, 22, 45, 7, 21, 57, 53, 52, 62, 30, 42, 25, 29, 23, 16, 18, 28, 46, 54, 26, 47, 60, 34, 55, 39, 31, 59, 44, 48, 14, 6, 37, 51, 17, 27, 64, 15, 1, 35, 10, 56},
			{27, 54, 4, 3, 46, 49, 9, 18, 11, 59, 61, 44, 45, 1, 2, 13, 34, 10, 42, 33, 40, 53, 58, 56, 32, 20, 12, 55, 38, 36, 19, 51, 24, 63, 26, 41, 62, 39, 6, 31, 5, 64, 35, 52, 43, 17, 25, 15, 28, 47, 50, 30, 16, 23, 57, 21, 29, 8, 14, 48, 37, 22, 7, 60},
			{6, 59, 2, 14, 36, 44, 8, 29, 33, 16, 11, 49, 18, 63, 51, 31, 9, 19, 21, 7, 17, 1, 62, 37, 4, 32, 10, 23, 50, 35, 60, 46, 43, 25, 22, 34, 5, 24, 28, 58, 55, 39, 52, 38, 57, 47, 54, 13, 3, 45, 40, 56, 61, 30, 12, 15, 20, 41, 42, 64, 53, 48, 26, 27},
			{45, 61, 18, 56, 24, 19, 23, 53, 27, 26, 40, 64, 60, 7, 48, 55, 41, 44, 12, 51, 46, 11, 50, 31, 43, 58, 25, 20, 21, 15, 9, 3, 42, 13, 2, 35, 47, 30, 10, 8, 62, 6, 16, 5, 4, 37, 59, 1, 22, 17, 33, 57, 29, 39, 32, 49, 38, 54, 63, 28, 14, 52, 34, 36},
			{46, 43, 52, 4, 3, 39, 10, 51, 50, 44, 42, 58, 22, 21, 47, 20, 59, 24, 54, 14, 34, 63, 57, 38, 53, 55, 56, 12, 62, 61, 36, 45, 64, 23, 37, 27, 6, 32, 48, 7, 11, 17, 30, 2, 41, 29, 40, 28, 26, 25, 31, 13, 5, 35, 16, 19, 60, 15, 1, 18, 33, 9, 8, 49},
			{21, 64, 1, 13, 47, 27, 60, 26, 41, 2, 14, 15, 23, 61, 6, 52, 10, 48, 30, 16, 22, 40, 39, 43, 42, 31, 17, 33, 63, 59, 8, 34, 46, 55, 44, 20, 29, 45, 38, 51, 49, 53, 25, 50, 7, 35, 19, 18, 24, 36, 28, 37, 54, 58, 11, 9, 4, 3, 32, 57, 5, 62, 56, 12},
			{37, 63, 32, 62, 16, 9, 40, 15, 34, 38, 4, 29, 57, 54, 43, 36, 45, 56, 26, 60, 64, 6, 20, 5, 1, 51, 27, 22, 47, 11, 49, 28, 39, 31, 14, 19, 18, 3, 21, 59, 24, 58, 33, 42, 23, 61, 12, 10, 53, 41, 55, 50, 48, 2, 52, 8, 30, 7, 35, 13, 25, 17, 46, 44},
			{49, 5, 41, 57, 20, 48, 55, 42, 39, 9, 45, 62, 17, 3, 28, 35, 25, 32, 29, 36, 52, 15, 18, 53, 14, 24, 13, 44, 54, 40, 30, 19, 12, 61, 1, 4, 50, 60, 56, 33, 43, 26, 8, 64, 27, 21, 22, 46, 6, 34, 38, 47, 23, 63, 7, 10, 31, 16, 58, 2, 59, 37, 51, 11},
			{33, 50, 30, 28, 11, 54, 22, 31, 5, 1, 12, 56, 25, 32, 53, 37, 58, 13, 35, 27, 2, 8, 47, 55, 7, 39, 38, 57, 41, 29, 48, 18, 63, 62, 52, 49, 17, 36, 26, 16, 44, 34, 9, 60, 20, 15, 14, 3, 59, 46, 51, 4, 64, 21, 43, 42, 6, 61, 40, 45, 19, 10, 24, 23},
			{35, 17, 38, 58, 25, 7, 34, 12, 46, 30, 13, 10, 8, 24, 19, 59, 4, 28, 23, 42, 33, 61, 49, 3, 52, 2, 5, 64, 37, 26, 16, 6, 41, 53, 54, 9, 40, 11, 57, 15, 36, 45, 51, 56, 32, 63, 48, 31, 20, 62, 60, 1, 27, 18, 14, 44, 47, 22, 43, 50, 39, 21, 29, 55},
			{52, 1, 27, 59, 50, 23, 38, 43, 21, 3, 37, 55, 35, 36, 14, 64, 42, 49, 32, 57, 58, 48, 33, 62, 56, 53, 61, 54, 39, 9, 63, 11, 5, 41, 28, 45, 16, 12, 13, 20, 2, 51, 17, 10, 15, 25, 29, 30, 4, 22, 18, 31, 19, 46, 60, 34, 7, 26, 44, 47, 24, 6, 40, 8},
			{64, 3, 6, 30, 63, 41, 53, 28, 49, 5, 34, 12, 54, 18, 20, 40, 2, 46, 52, 25, 9, 10, 56, 15, 58, 36, 1, 60, 55, 32, 14, 38, 29, 51, 57, 31, 21, 7, 61, 62, 22, 16, 44, 45, 50, 27, 24, 26, 23, 42, 11, 8, 33, 17, 47, 39, 37, 4, 19, 59, 48, 43, 13, 35},
			{32, 46, 21, 49, 40, 31, 33, 2, 16, 45, 51, 11, 44, 25, 56, 57, 54, 17, 47, 19, 55, 27, 28, 60, 62, 41, 20, 4, 23, 52, 5, 59, 15, 30, 53, 6, 22, 63, 42, 24, 7, 8, 13, 14, 61, 38, 9, 64, 36, 29, 48, 35, 26, 43, 58, 37, 1, 12, 10, 39, 18, 34, 50, 3},
			{18, 26, 47, 7, 48, 37, 44, 4, 59, 46, 58, 8, 31, 23, 52, 63, 40, 38, 11, 6, 3, 45, 41, 29, 28, 34, 49, 16, 12, 43, 13, 2, 14, 50, 32, 39, 54, 33, 64, 27, 60, 57, 19, 53, 1, 36, 35, 42, 62, 61, 10, 15, 30, 24, 51, 25, 9, 5, 17, 56, 22, 55, 21, 20},
			{13, 58, 19, 35, 51, 22, 56, 34, 60, 15, 27, 6, 38, 43, 24, 29, 64, 37, 39, 5, 30, 26, 7, 1, 25, 3, 40, 17, 48, 47, 44, 21, 9, 46, 10, 36, 8, 55, 59, 23, 33, 49, 18, 63, 12, 4, 41, 20, 54, 28, 16, 45, 52, 14, 50, 57, 42, 53, 31, 62, 2, 11, 32, 61},
			{25, 20, 55, 11, 15, 17, 29, 54, 2, 22, 53, 26, 42, 33, 61, 48, 16, 31, 13, 44, 51, 34, 24, 35, 45, 8, 19, 50, 27, 7, 10, 37, 38, 4, 3, 1, 60, 18, 47, 43, 32, 56, 62, 39, 28, 23, 46, 21, 12, 63, 59, 40, 9, 5, 6, 64, 52, 14, 36, 30, 58, 57, 49, 41},
			{62, 36, 9, 8, 12, 10, 16, 24, 47, 32, 28, 17, 39, 41, 30, 19, 22, 61, 63, 4, 14, 18, 59, 50, 26, 29, 31, 42, 35, 6, 57, 64, 48, 11, 40, 25, 2, 44, 37, 56, 52, 55, 3, 34, 5, 43, 58, 54, 21, 49, 27, 7, 53, 20, 13, 1, 15, 45, 38, 46, 51, 23, 60, 33},
			{61, 39, 45, 60, 14, 5, 42, 57, 9, 50, 1, 13, 62, 10, 4, 7, 21, 23, 20, 8, 53, 36, 43, 12, 24, 33, 18, 30, 15, 46, 51, 22, 19, 26, 35, 58, 52, 34, 49, 17, 40, 47, 48, 31, 37, 59, 6, 11, 55, 2, 32, 44, 38, 56, 3, 41, 16, 29, 28, 27, 64, 54, 25, 63},
			{19, 33, 13, 40, 32, 6, 57, 9, 44, 29, 63, 38, 46, 27, 35, 42, 53, 58, 18, 3, 36, 50, 51, 20, 64, 7, 59, 62, 49, 30, 56, 48, 31, 47, 45, 5, 10, 1, 41, 54, 21, 2, 24, 12, 17, 55, 15, 43, 11, 39, 14, 25, 60, 8, 23, 52, 26, 34, 16, 37, 28, 61, 4, 22},
			{63, 31, 3, 26, 35, 53, 7, 56, 20, 55, 50, 2, 1, 39, 23, 28, 52, 57, 10, 49, 48, 38, 46, 21, 36, 27, 37, 6, 22, 51, 25, 54, 16, 29, 43, 17, 42, 40, 33, 14, 61, 41, 45, 9, 34, 60, 30, 58, 64, 12, 19, 62, 13, 44, 4, 24, 8, 47, 11, 5, 32, 15, 18, 59},
			{24, 55, 20, 64, 21, 4, 14, 60, 58, 34, 56, 30, 12, 45, 10, 33, 11, 2, 6, 43, 7, 59, 9, 26, 29, 46, 52, 5, 40, 8, 28, 32, 50, 15, 62, 3, 48, 23, 35, 22, 51, 63, 37, 13, 39, 54, 49, 38, 27, 18, 47, 16, 1, 36, 17, 61, 41, 42, 53, 19, 44, 25, 57, 31},
			{43, 2, 59, 15, 34, 25, 54, 47, 22, 41, 18, 36, 19, 5, 31, 3, 61, 12, 37, 56, 32, 60, 42, 17, 50, 35, 55, 45, 20, 16, 23, 9, 6, 52, 46, 13, 39, 26, 8, 38, 10, 44, 4, 29, 62, 11, 33, 57, 30, 40, 53, 63, 58, 28, 49, 48, 24, 1, 27, 51, 21, 64, 14, 7},
			{41, 45, 10, 51, 62, 16, 12, 11, 32, 64, 47, 48, 61, 17, 59, 9, 33, 35, 44, 29, 8, 5, 25, 24, 34, 13, 53, 2, 19, 4, 3, 43, 57, 49, 20, 28, 36, 58, 7, 63, 18, 42, 14, 40, 26, 1, 27, 50, 15, 37, 6, 46, 31, 22, 21, 54, 23, 55, 30, 38, 56, 60, 52, 39},
			{1, 48, 49, 52, 38, 28, 30, 37, 43, 53, 54, 25, 24, 16, 57, 51, 14, 55, 34, 13, 45, 39, 22, 41, 15, 61, 11, 26, 10, 18, 31, 44, 56, 19, 59, 21, 27, 64, 4, 60, 23, 35, 46, 36, 8, 5, 47, 6, 50, 20, 7, 2, 42, 9, 29, 32, 33, 17, 12, 58, 3, 40, 63, 62},
			{17, 8, 5, 18, 23, 61, 58, 36, 52, 11, 62, 60, 6, 26, 15, 4, 27, 16, 1, 47, 19, 54, 40, 63, 41, 21, 39, 14, 42, 38, 33, 12, 25, 44, 24, 37, 30, 9, 34, 32, 53, 28, 31, 22, 64, 7, 20, 59, 51, 55, 56, 43, 57, 3, 10, 45, 48, 13, 49, 35, 29, 50, 2, 46},
			{44, 22, 42, 29, 27, 46, 39, 50, 37, 14, 7, 40, 13, 49, 21, 8, 15, 30, 31, 64, 4, 62, 23, 28, 63, 17, 57, 58, 24, 60, 1, 47, 11, 2, 12, 61, 55, 51, 53, 18, 19, 52, 32, 3, 48, 16, 56, 25, 5, 38, 34, 59, 41, 33, 26, 35, 10, 6, 20, 9, 54, 36, 43, 45},
		}
	}

	lim := sizeBox * sizeBox
	shuffle := lim * lim * lim
	availNum := []int{}

	for i := 0; i < sizeBox; i++ {
		availNum = append(availNum, i)
	}

	for count := 0; count < shuffle; count++ {
		box := r.Intn(sizeBox)
		source := r.Intn(sizeBox)
		target := remArrCheck(availNum, source)[r.Intn(sizeBox-1)]

		if r.Intn(2) == 0 {
			swap := dt[box*sizeBox+target]
			dt[box*sizeBox+target] = dt[box*sizeBox+source]
			dt[box*sizeBox+source] = swap
		} else {
			swap := []int{}
			for i := 0; i < lim; i++ {
				swap = append(swap, dt[i][box*sizeBox+target])
			}

			for i := 0; i < lim; i++ {
				dt[i][box*sizeBox+target] = dt[i][box*sizeBox+source]
			}

			for i := 0; i < lim; i++ {
				dt[i][box*sizeBox+source] = swap[i]
			}
		}
	}

	//rotate
	shuffle = r.Intn(4)
	for rotate := 0; rotate < shuffle; rotate++ {
		seed = dt
		dt = nil
		for i := 0; i < lim; i++ {
			var dt1 []int
			for j := 0; j < lim; j++ {
				dt1 = append(dt1, seed[lim-1-i][j])
			}
			dt = append(dt, dt1)
		}
	}

	return dt
}

// ------------------------------------------ SOLVER ------------------------------------------
func runSolver(dt [][]int, sizeBox int) ([][]int, error) {
	availNum := [][][]int{}
	lim := sizeBox * sizeBox

	for i, e := range dt {
		availNum = append(availNum, [][]int{})
		for j, e2 := range e {
			availNum[i] = append(availNum[i], []int{})
			if e2 == 0 {
				for k := 0; k < lim; k++ {
					availNum[i][j] = append(availNum[i][j], k+1)
				}
			}
		}
	}

	for change := true; change; {
		change = false
		var err error

		// 1-STEP ELIMINATION
		change, err = oneStepElim(dt, availNum, sizeBox)
		if err != nil {
			return dt, err
		}
		if change {
			continue
		}

		// 1-STEP COMPLETION
		change, err = oneStepComp(dt, availNum, sizeBox)
		if err != nil {
			return dt, err
		}
		if change {
			continue
		}

		// 2-STEP ELIMINATION BOX
		change, err = twoStepElimBox(dt, availNum, sizeBox)
		if err != nil {
			return dt, err
		}
		if change {
			continue
		}

		// 2-STEP ELIMINATION HORIZONTAL
		change, err = twoStepElimHor(dt, availNum, sizeBox)
		if err != nil {
			return dt, err
		}
		if change {
			continue
		}

		// 2-STEP ELIMINATION VERTICAL
		change, err = twoStepElimVer(dt, availNum, sizeBox)
		if err != nil {
			return dt, err
		}
		if change {
			continue
		}

		// 2-STEP COMPLETION BOX
		change, err = twoStepCompBox(dt, availNum, sizeBox)
		if err != nil {
			return dt, err
		}
		if change {
			continue
		}

		// 2-STEP COMPLETION HOR
		change, err = twoStepCompHor(dt, availNum, sizeBox)
		if err != nil {
			return dt, err
		}
		if change {
			continue
		}

		// 2-STEP COMPLETION VER
		change, err = twoStepCompVer(dt, availNum, sizeBox)
		if err != nil {
			return dt, err
		}
		if change {
			continue
		}

	}

	return dt, nil
}

func oneStepElim(dt [][]int, availNum [][][]int, sizeBox int) (bool, error) {
	lim := sizeBox * sizeBox
	change := false

	for x, e := range dt {
		for y, e2 := range e {
			if e2 == 0 {
				if len(availNum[x][y]) == 0 {
					return false, errors.New("UNSOLVABLE")
				} else if len(availNum[x][y]) > 1 {
					for k := 0; k < len(availNum[x][y]); k++ {
						skip := false

						// HORIZONTAL CHECKING
						for i := 0; i < lim; i++ {
							if availNum[x][y][k] == dt[x][i] {
								availNum[x][y] = append(availNum[x][y][:k], availNum[x][y][k+1:]...)
								skip = true
								k--
								change = true
								break
							}
						}
						if skip {
							continue
						}

						// VERTICAL CHECKING
						for i := 0; i < lim; i++ {
							if availNum[x][y][k] == dt[i][y] {
								availNum[x][y] = append(availNum[x][y][:k], availNum[x][y][k+1:]...)
								skip = true
								k--
								change = true
								break
							}
						}
						if skip {
							continue
						}

						// BOX CHECKING
						boxX := int(math.Floor(float64(x) / float64(sizeBox)))
						boxY := int(math.Floor(float64(y) / float64(sizeBox)))
						for i := 0; i < sizeBox; i++ {
							for j := 0; j < sizeBox; j++ {
								if availNum[x][y][k] == dt[boxX*sizeBox+i][boxY*sizeBox+j] {
									availNum[x][y] = append(availNum[x][y][:k], availNum[x][y][k+1:]...)
									skip = true
									k--
									change = true
									break
								}
							}
							if skip {
								break
							}
						}
						if skip {
							continue
						}
					}
				}
			}
		}
	}

	changeT, err := tidyingUp(dt, availNum, sizeBox)
	return changeT || change, err
}

func oneStepComp(dt [][]int, availNum [][][]int, sizeBox int) (bool, error) {
	lim := sizeBox * sizeBox
	change := false

	//HORIZONTAL
	for y := 0; y < lim; y++ {
		blocking := []int{}
		for i := 0; i < lim; i++ {
			blocking = append(blocking, 0)
		}

		for x := 0; x < lim; x++ {
			for _, e := range availNum[y][x] {
				blocking[e-1]++
			}
		}

		for i, e := range blocking {
			if e == 1 {
				for x := 0; x < lim; x++ {
					if exArrCheck(availNum[y][x], i+1) {
						availNum[y][x] = []int{i + 1}
						change = true
						break
					}
				}
			}
		}
	}

	//VERTICAL
	for x := 0; x < lim; x++ {
		blocking := []int{}
		for i := 0; i < lim; i++ {
			blocking = append(blocking, 0)
		}

		for y := 0; y < lim; y++ {
			for _, e := range availNum[y][x] {
				blocking[e-1]++
			}
		}

		for i, e := range blocking {
			if e == 1 {
				for y := 0; y < lim; y++ {
					if exArrCheck(availNum[y][x], i+1) {
						availNum[y][x] = []int{i + 1}
						change = true
						break
					}
				}
			}
		}
	}

	// BOX
	for boxX := 0; boxX < sizeBox; boxX++ {
		for boxY := 0; boxY < sizeBox; boxY++ {
			blocking := []int{}
			for i := 0; i < lim; i++ {
				blocking = append(blocking, 0)
			}

			for x := 0; x < sizeBox; x++ {
				for y := 0; y < sizeBox; y++ {
					for _, e := range availNum[boxY*sizeBox+y][boxX*sizeBox+x] {
						blocking[e-1]++
					}
				}
			}

			for i, e := range blocking {
				if e == 1 {
					for x := 0; x < sizeBox; x++ {
						for y := 0; y < sizeBox; y++ {
							if exArrCheck(availNum[boxY*sizeBox+y][boxX*sizeBox+x], i+1) {
								availNum[boxY*sizeBox+y][boxX*sizeBox+x] = []int{i + 1}
								change = true
								break
							}
						}
					}
				}
			}
		}
	}

	changeT, err := tidyingUp(dt, availNum, sizeBox)
	return changeT || change, err
}

func twoStepElimBox(dt [][]int, availNum [][][]int, sizeBox int) (bool, error) {
	change := false
	for boxX := 0; boxX < sizeBox; boxX++ {
		for boxY := 0; boxY < sizeBox; boxY++ {
			// HORIZONTAL
			var blocking [][]int
			for x := 0; x < sizeBox; x++ {
				blocking = append(blocking, []int{})
				for y := 0; y < sizeBox; y++ {
					for _, e := range availNum[boxX*sizeBox+x][boxY*sizeBox+y] {
						blocking[x] = addArrCheck(blocking[x], e)
					}
				}
			}

			blocking = remArrSim(blocking)
			for i := 0; i < sizeBox; i++ {
				for j := 0; j < sizeBox; j++ {
					if j == boxY {
						continue
					}

					for x := 0; x < sizeBox; x++ {
						if dt[boxX*sizeBox+i][j*sizeBox+x] == 0 {
							for _, e := range blocking[i] {
								if exArrCheck(availNum[boxX*sizeBox+i][j*sizeBox+x], e) {
									change = true
									availNum[boxX*sizeBox+i][j*sizeBox+x] = remArrCheck(availNum[boxX*sizeBox+i][j*sizeBox+x], e)
								}
							}
						}
					}
				}
			}

			// VERTICAL
			blocking = nil
			for y := 0; y < sizeBox; y++ {
				blocking = append(blocking, []int{})
				for x := 0; x < sizeBox; x++ {
					for _, e := range availNum[boxX*sizeBox+x][boxY*sizeBox+y] {
						blocking[y] = addArrCheck(blocking[y], e)
					}
				}
			}

			blocking = remArrSim(blocking)
			for j := 0; j < sizeBox; j++ {
				for i := 0; i < sizeBox; i++ {
					if i == boxX {
						continue
					}
					for y := 0; y < sizeBox; y++ {
						if dt[i*sizeBox+y][boxY*sizeBox+j] == 0 {
							for _, e := range blocking[j] {
								if exArrCheck(availNum[i*sizeBox+y][boxY*sizeBox+j], e) {
									change = true
									availNum[i*sizeBox+y][boxY*sizeBox+j] = remArrCheck(availNum[i*sizeBox+y][boxY*sizeBox+j], e)
								}
							}
						}
					}
				}
			}
		}
	}

	changeT, err := tidyingUp(dt, availNum, sizeBox)
	return changeT || change, err
}

func twoStepElimHor(dt [][]int, availNum [][][]int, sizeBox int) (bool, error) {
	lim := sizeBox * sizeBox
	change := false

	for y := 0; y < lim; y++ {
		var blocking [][]int
		for j := 0; j < sizeBox; j++ {
			blocking = append(blocking, []int{})
			for i := 0; i < sizeBox; i++ {
				for _, e := range availNum[y][j*sizeBox+i] {
					blocking[j] = addArrCheck(blocking[j], e)
				}
			}
		}

		blocking = remArrSim(blocking)
		boxY := int(math.Floor(float64(y) / float64(sizeBox)))
		for boxX := 0; boxX < sizeBox; boxX++ {
			for j := 0; j < sizeBox; j++ {
				if boxY*sizeBox+j == y {
					continue
				}

				for k := 0; k < sizeBox; k++ {
					if dt[boxY*sizeBox+j][boxX*sizeBox+k] == 0 {
						for _, e := range blocking[boxX] {
							if exArrCheck(availNum[boxY*sizeBox+j][boxX*sizeBox+k], e) {
								availNum[boxY*sizeBox+j][boxX*sizeBox+k] = remArrCheck(availNum[boxY*sizeBox+j][boxX*sizeBox+k], e)
								change = true
							}
						}
					}
				}
			}
		}

	}

	changeT, err := tidyingUp(dt, availNum, sizeBox)
	return changeT || change, err
}

func twoStepElimVer(dt [][]int, availNum [][][]int, sizeBox int) (bool, error) {
	lim := sizeBox * sizeBox
	change := false

	for x := 0; x < lim; x++ {
		var blocking [][]int
		for i := 0; i < sizeBox; i++ {
			blocking = append(blocking, []int{})
			for j := 0; j < sizeBox; j++ {
				for _, e := range availNum[i*sizeBox+j][x] {
					blocking[i] = addArrCheck(blocking[i], e)
				}
			}
		}

		blocking = remArrSim(blocking)
		boxX := int(math.Floor(float64(x) / float64(sizeBox)))
		for boxY := 0; boxY < sizeBox; boxY++ {
			for j := 0; j < sizeBox; j++ {
				if boxX*sizeBox+j == x {
					continue
				}

				for k := 0; k < sizeBox; k++ {
					if dt[boxY*sizeBox+k][boxX*sizeBox+j] == 0 {
						for _, e := range blocking[boxY] {
							if exArrCheck(availNum[boxY*sizeBox+k][boxX*sizeBox+j], e) {
								availNum[boxY*sizeBox+k][boxX*sizeBox+j] = remArrCheck(availNum[boxY*sizeBox+k][boxX*sizeBox+j], e)
								change = true
							}
						}
					}
				}
			}
		}

	}

	changeT, err := tidyingUp(dt, availNum, sizeBox)
	return changeT || change, err
}

func twoStepCompBox(dt [][]int, availNum [][][]int, sizeBox int) (bool, error) {
	lim := sizeBox * sizeBox
	change := false

	for boxX := 0; boxX < sizeBox; boxX++ {
		for boxY := 0; boxY < sizeBox; boxY++ {
			occSum := []int{}
			for i := 0; i < lim; i++ {
				occSum = append(occSum, 0)
			}

			for i := 0; i < sizeBox; i++ {
				for j := 0; j < sizeBox; j++ {
					for _, e := range availNum[boxY*sizeBox+j][boxX*sizeBox+i] {
						occSum[e-1]++
					}
				}
			}

			checked := append(getAllArrIdx(occSum, lim), getAllArrIdx(occSum, 0)...)
			for i := 0; i < lim; i++ {
				if exArrCheck(checked, i) {
					continue
				}

				target := getAllArrIdx(occSum, occSum[i])
				if len(target) < occSum[i] {
					continue
				}

				blocking := [][]int{}
				//	OVERLAP CANDIDATE CHECKING LEN
				for x := 0; x < sizeBox; x++ {
					for y := 0; y < sizeBox; y++ {
						if len(availNum[boxY*sizeBox+y][boxX*sizeBox+x]) >= occSum[i] {
							blocking = append(blocking, []int{y, x})
						}
					}
				}

				//	OVERLAP CANDIDATE CHECKING SUM OCCURENCE
				for j := 0; j < len(blocking); j++ {
					count := 0
					for _, e := range target {
						if exArrCheck(availNum[boxY*sizeBox+blocking[j][0]][boxX*sizeBox+blocking[j][1]], e+1) {
							count++
						}
					}

					if count < occSum[i] {
						blocking = append(blocking[:j], blocking[j+1:]...)
						j--
					}
				}

				// OVERLAP CANDITATE CHECKING SELF OCCURENCE
				for _, e := range blocking {
					if !exArrCheck(availNum[boxY*sizeBox+e[0]][boxX*sizeBox+e[1]], i+1) {
						occSum[i] = 0
						break
					}
				}

				if occSum[i] == 0 || (len(target) > occSum[i]) {
					continue
				}

				checked = append(checked, target...)
				for _, bx := range blocking {
					if len(availNum[boxY*sizeBox+bx[0]][boxX*sizeBox+bx[1]]) != len(target) {
						change = true
						availNum[boxY*sizeBox+bx[0]][boxX*sizeBox+bx[1]] = nil
						for _, e := range target {
							availNum[boxY*sizeBox+bx[0]][boxX*sizeBox+bx[1]] = append(availNum[boxY*sizeBox+bx[0]][boxX*sizeBox+bx[1]], e+1)
						}
					}
				}
			}
		}
	}

	changeT, err := tidyingUp(dt, availNum, sizeBox)
	return changeT || change, err
}

func twoStepCompHor(dt [][]int, availNum [][][]int, sizeBox int) (bool, error) {
	lim := sizeBox * sizeBox
	change := false

	for y := 0; y < lim; y++ {
		occSum := []int{}
		for i := 0; i < lim; i++ {
			occSum = append(occSum, 0)
		}

		for x := 0; x < lim; x++ {
			for _, e := range availNum[y][x] {
				occSum[e-1]++
			}
		}

		checked := append(getAllArrIdx(occSum, lim), getAllArrIdx(occSum, 0)...)
		for i := 0; i < lim; i++ {
			if exArrCheck(checked, i) {
				continue
			}

			target := getAllArrIdx(occSum, occSum[i])
			if len(target) < occSum[i] {
				continue
			}

			blocking := []int{}
			//	OVERLAP CANDIDATE CHECKING LEN
			for x := 0; x < lim; x++ {
				if len(availNum[y][x]) >= occSum[i] {
					blocking = append(blocking, x)
				}
			}

			//	OVERLAP CANDIDATE CHECKING SUM OCCURENCE
			for x := 0; x < len(blocking); x++ {
				count := 0
				for _, e := range target {
					if exArrCheck(availNum[y][blocking[x]], e+1) {
						count++
					}
				}

				if count < occSum[i] {
					blocking = append(blocking[:x], blocking[x+1:]...)
					x--
				}
			}

			// OVERLAP CANDITATE CHECKING SELF OCCURENCE
			for _, e := range blocking {
				if !exArrCheck(availNum[y][e], i+1) {
					occSum[i] = 0
					break
				}
			}

			if occSum[i] == 0 || (len(target) > occSum[i]) {
				continue
			}

			checked = append(checked, target...)
			for _, x := range blocking {
				if len(availNum[y][x]) != len(target) {
					change = true
					availNum[y][x] = nil
					for _, e := range target {
						availNum[y][x] = append(availNum[y][x], e+1)
					}
				}
			}
		}
	}

	changeT, err := tidyingUp(dt, availNum, sizeBox)
	return changeT || change, err
}

func twoStepCompVer(dt [][]int, availNum [][][]int, sizeBox int) (bool, error) {
	lim := sizeBox * sizeBox
	change := false

	for x := 0; x < lim; x++ {
		occSum := []int{}
		for i := 0; i < lim; i++ {
			occSum = append(occSum, 0)
		}

		for y := 0; y < lim; y++ {
			for _, e := range availNum[y][x] {
				occSum[e-1]++
			}
		}

		checked := append(getAllArrIdx(occSum, lim), getAllArrIdx(occSum, 0)...)
		for i := 0; i < lim; i++ {
			if exArrCheck(checked, i) {
				continue
			}

			target := getAllArrIdx(occSum, occSum[i])
			if len(target) < occSum[i] {
				continue
			}

			blocking := []int{}
			//	OVERLAP CANDIDATE CHECKING LEN
			for y := 0; y < lim; y++ {
				if len(availNum[y][x]) >= occSum[i] {
					blocking = append(blocking, y)
				}
			}

			//	OVERLAP CANDIDATE CHECKING SUM OCCURENCE
			for y := 0; y < len(blocking); y++ {
				count := 0
				for _, e := range target {
					if exArrCheck(availNum[blocking[y]][x], e+1) {
						count++
					}
				}

				if count < occSum[i] {
					blocking = append(blocking[:y], blocking[y+1:]...)
					y--
				}
			}

			// OVERLAP CANDITATE CHECKING SELF OCCURENCE
			for _, e := range blocking {
				if !exArrCheck(availNum[e][x], i+1) {
					occSum[i] = 0
					break
				}
			}

			if occSum[i] == 0 || (len(target) > occSum[i]) {
				continue
			}

			checked = append(checked, target...)
			for _, y := range blocking {
				if len(availNum[y][x]) != len(target) {
					change = true
					availNum[y][x] = nil
					for _, e := range target {
						availNum[y][x] = append(availNum[y][x], e+1)
					}
				}
			}
		}
	}

	changeT, err := tidyingUp(dt, availNum, sizeBox)
	return changeT || change, err
}

func tidyingUp(dt [][]int, availNum [][][]int, sizeBox int) (bool, error) {
	lim := sizeBox * sizeBox
	change := false

	for x, e := range dt {
		for y, e2 := range e {
			if e2 == 0 {
				if len(availNum[x][y]) == 1 {
					dt[x][y] = availNum[x][y][0]
					availNum[x][y] = nil
					// HORIZONTAL CLEANING
					for i := 0; i < lim; i++ {
						if dt[x][i] == 0 {
							availNum[x][i] = remArrCheck(availNum[x][i], dt[x][y])
						}
					}
					// VERTICAL CLEANING
					for i := 0; i < lim; i++ {
						if dt[i][y] == 0 {
							availNum[i][y] = remArrCheck(availNum[i][y], dt[x][y])
						}
					}
					// BOX CLEANING
					boxX := int(math.Floor(float64(x) / float64(sizeBox)))
					boxY := int(math.Floor(float64(y) / float64(sizeBox)))
					for i := 0; i < sizeBox; i++ {
						for j := 0; j < sizeBox; j++ {
							if dt[boxX*sizeBox+i][boxY*sizeBox+j] == 0 {
								availNum[boxX*sizeBox+i][boxY*sizeBox+j] = remArrCheck(availNum[boxX*sizeBox+i][boxY*sizeBox+j], dt[x][y])
							}
						}
					}

					change = true
				} else if len(availNum[x][y]) == 0 {
					return false, errors.New("UNSOLVABLE")
				}
			}
		}
	}
	return change, nil
}
